{"version":3,"sources":["Table.js","util.js","DrawMap.js","LineGraph.js","InfoBox.js","App.js","index.js"],"names":["Table","countries","className","map","country","cases","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","PrettyPrintStat","stat","numeral","format","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","DrawMap","caseType","zoom","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","gridLines","type","time","tooltipFormat","yAxes","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","setColor","undefined","useEffect","fetch","then","response","json","data1","timeline","fetchData","length","datasets","backgroundColor","InfoBox","title","total","active","props","Card","onClick","CardContent","Typography","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onChangeCountry","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayDeaths","todayRecovered","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dc1e293.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Table.css\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"rgb(85, 204, 234)\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const PrettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n  let color = \"\";\r\n  switch (casesType) {\r\n    case \"deaths\":\r\n      color = \"rgb(85, 204, 234)\";\r\n      break;\r\n    case \"recovered\":\r\n      color = \" rgb(121, 198, 121)\";\r\n      break;\r\n    default:\r\n      color = \"rgb(245, 103, 124)\";\r\n  }\r\n\r\n  return data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color=\"rgb(31, 30, 48)\"\r\n      fillColor={casesTypeColors[`${casesType}`].rgb}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\nfunction DrawMap({ countries, caseType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, caseType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrawMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport { colors } from \"@material-ui/core\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, country }) {\r\n  const [data, setData] = useState({});\r\n  const [color, setColor] = useState(\"red\");\r\n\r\n  const url =\r\n    country.country === undefined\r\n      ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n      : `https://disease.sh/v3/covid-19/historical/` +\r\n        `${country.country}` +\r\n        `?lastdays=120`;\r\n\r\n  useEffect(() => {\r\n    switch (casesType) {\r\n      case \"deaths\":\r\n        setColor(\"rgb(85, 204, 234)\");\r\n        break;\r\n      case \"recovered\":\r\n        setColor(\" rgb(121, 198, 121)\");\r\n        break;\r\n      default:\r\n        setColor(\"rgb(245, 103, 124)\");\r\n    }\r\n    const fetchData = async () => {\r\n      await fetch(url)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data1) => {\r\n          let chartData = {};\r\n          if (country.country === undefined) {\r\n            chartData = buildChartData(data1, casesType);\r\n          } else {\r\n            chartData = buildChartData(data1.timeline, casesType);\r\n          }\r\n          setData(chartData);\r\n\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType, country]);\r\n  return (\r\n    <div className=\"line__graph\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: color,\r\n\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport \"./infoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nfunction InfoBox({ title, cases, total, active, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox  ${active && \"infoBox--selected\"} ${title} `}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <p>{title}</p>\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import \"./App.css\";\nimport Table from \"./Table\";\nimport DrawMap from \"./DrawMap\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData, PrettyPrintStat } from \"./util\";\nimport \"./map.css\";\n\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n  Tab,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport InfoBox from \"./InfoBox\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: 40.4796 });\n  const [mapZoom, setMapZoom] = useState(2.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []); /* runs wherever country is changed */\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  const onChangeCountry = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode == \"Worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    console.log(url);\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapZoom(2);\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID 19 Tracker</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onChangeCountry}\n            >\n              <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronovirus Cases\"\n            cases={PrettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n            active={casesType === \"cases\"}\n          />\n\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={PrettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n            active={casesType === \"deaths\"}\n          />\n\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={PrettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n            active={casesType === \"recovered\"}\n          />\n        </div>\n        <div>\n          <DrawMap\n            center={mapCenter}\n            zoom={mapZoom}\n            countries={mapCountries}\n            caseType={casesType}\n          />\n        </div>\n      </div>\n      <Card className=\"app__right\">\n        <h3 className=\"worldwide__text\">\n          {country} new {casesType}\n        </h3>\n\n        <LineGraph casesType={casesType} country={countryInfo} />\n        <CardContent>\n          <h1>Live cases by country </h1>\n          <Table countries={tableData} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}